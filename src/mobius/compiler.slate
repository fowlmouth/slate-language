
m@(CompiledMethod traits) new
"Answer a new CompiledMethod with a fresh compilation state."
[
  m clone `>>
    [| :newM |
     method := newM.
     inputVariables := 0.
     optionalKeywords := m optionalKeywords new.
     restVariable := False.
     registerCount := 0.
     environment := Nil.
     selector := Nil.
     literals := m literals new.
     selectors := m selectors new.
     code := m code new.
     debugMap := m debugMap new.
     sourceTree := Nil. ]
].

m@(CompiledMethod traits) sourceTreeOf: index
"Find the source tree corresponding to a bytecode's index."
[
  m debugMap do:
    [| :start :end :sourceTree |
     (index between: start and: end)
       ifTrue: [^ sourceTree]]
    inGroupsOf: 3.
  Nil
].

m@(CompiledMethod traits) definitionLocation
[
  m sourceTree isNotNil /\ [m sourceTree hasSlotNamed: #source]
    ifTrue: [m sourceTree definitionLocation]
    ifFalse: ['Nil']
].

m@(CompiledMethod traits) recompile
"If the method has a sourceTree, replace the method with a re-compiled version
of it."
[
  m sourceTree
    ifNil: [warn: 'The method has no source code to recompile.'. m]
    ifNotNilDo: [| :src | m forwardTo: src compile]
].

ensureNamespace: #SSAVM.
SSAVM ensureNamespace: #Code.

SSAVM Code define: #Instruction &parents: {Cloneable} &slots: {
  #code.
  #selector.
  #name.
  #argNames -> {}.
  #offsettingArgIndices -> {}.
}.

SSAVM Code define: #ByCode ->
  (SSAVM Code Instruction traits define: #ByCode -> Dictionary new).

i@(SSAVM Code Instruction traits) instancesSetting: slotNames to: values
[
  resend `>> [do: [| :each |
    each argNames do:
      [| :argName | (#{'arity'. 'size'} includes: argName) ifTrue:
        [""]].
    SSAVM Code addImmutableSlot: each selector valued: each code.
    i ByCode at: each code put: each].
  ]
].

SSAVM Code Instruction instancesSetting: #{#code. #selector. #name. #argNames. #offsettingArgIndices} to: #{
  {0. #directSendMessage. 'Direct Send'. {'register of result'. 'selector'. 'arity' ". args..."}. {2}}.
  "{1. #indirectSendMessage. 'Indirect Send'. {'register of result'. 'selector'. 'arity'. args...}. {2}}."
  "{2. #allocateRegisters. 'Allocate Registers'. 3. {}}."
  {3. #loadLiteral. 'Load Literal'. {'register of result'. 'index of literal'}}.
  "{4. #storeLiteral. 'Store Literal'. {'index of literal'. 'register of source'}}."
  {5. #sendMessageWithOptionals. 'Send with Optionals'. {'register of result'. 'selector'. 'arity'. 'register of optionals array' ". args..."}. {2}}.
  {7. #newClosure. 'New Closure'. {'register of result'. 'block'}}.
  {8. #newArrayWith. 'New Array With'. {'register of result'. 'size' ". args..."}. {1}}.
  {9. #resendMessage. 'Resend'. {'register of result'. 'lexical offset'}}.
  {10. #returnFrom. 'Return From'. {'register of result'. 'lexical offset'}}.
  {11. #loadEnvironment. 'Load Environment'. {'register of result'}}.
  {12. #loadVariable. 'Load Variable'. {'register of result'}}.
  {13. #storeVariable. 'Store Variable'. {'register of result'}}.
  {14. #loadFreeVariable. 'Load Free Variable'. {'register of result'. 'lexical offset'. 'index of variable'}}.
  {15. #storeFreeVariable. 'Store Free Variable'. {'lexical offset'. 'index of variable'. 'register of source'}}.
  {16. #isIdenticalTo. 'Is Identical To'. {'register of result'. 'register of x'. 'register of y'}}.
  {17. #branchKeyed. 'Branch Keyed'. {'register of key'. 'table'}}.
  {18. #jumpTo. 'Jump To'. {'offset'}}.
  "Used like SSA phi / branch merges:"
  {19. #moveRegister. 'Move Register'. {'register of source'. 'register of result'}}.
  {20. #branchIfTrue. 'Branch If True'. {'register of condition'. 'branch offset'}}.
  {21. #branchIfFalse. 'Branch If False'. {'register of condition'. 'branch offset'}}.
  "Marks the end of a block:"
  {22. #returnRegister. 'Return Register'. {'register of value'}}.
  "Marks the end of a block:"
  {23. #returnValue. 'Return Value'. {'value to return'}}.
  "I'm not sure what this does yet..used in bootstrap:"
  {24. #resume. 'Resume'. {}}.
  {25. #primitiveDo. 'Primitive Do'. {'number of primitive'. 'arity'. 'register of result' ". args..."}. {1}}.
  {26. #directApplyTo. 'Direct Apply To'. {'method'. 'arity'. 'register of result' ". args..."}. {1}}.
  {27. #isNilOp. 'Is Nil'. {'register of result'. 'register of x'}}.
  "these check the arguments to see if their maps match the ones in the map array"
  "if they match, we fall through to the next instruction which is the primitive (no code) or inlined function"
  "it also needs to set up the input varibles"
  {28. #inlinePrimitiveCheckJump. 'Inline Primitive Check Jump'. {'register of result'. 'map array'. 'prim number(in-opcode not a register)'. 'arity'. 'jump offset' ". args..."}. {3}}.
  {29. #inlineMethodCheckJump. 'Inline Method Check Jump'. {'map array'. 'arity'. 'jump offset' ". args..."}. {1}}.
  {30. #sendMessageWithOptionalsInline. 'Send with Optionals Inline'. {'register of result'. 'selector'. 'arity'. 'optional count'. ". args...optionals..."}. {2. 3}}
}.

SSAVM define: #Compiler &parents: {Cloneable}
  &slots: {#contexts -> Stack new}.

SSAVM Compiler traitsWindow addDelegate: SSAVM Code.

g@(SSAVM Compiler traits) new
[g clone `>> [contexts := g contexts new. ]].

SSAVM Compiler traits define: #Context &parents: {Cloneable} &slots: {
  #isClosure -> False "Whether the method being compiled is a closure.".
  #method -> CompiledMethod new "The method the context targets.".
  #codeWriter "The stream for writing bytecodes to the method.".
  #debugMap -> ExtensibleArray new
    "Gathers the method's debug map; must be indexable at all times.".
  #registerValues -> ExtensibleArray new
    "The current register values.".
  #labels -> ExtensibleArray new
    "label serials -> code index.".
  #relocations -> Dictionary new
    "code index -> label serials".
  #currentRegister -> 0
    "The last assigned register value.. or the count?"
}.

c@(SSAVM Compiler Context traits) newOn: method
[
  method code := Array new.
  c clone `>>
    [method := method.
     codeWriter := method code writer.
     debugMap := method debugMap as: c debugMap.
     registerValues := c registerValues new.
     relocations := c relocations new.
     labels := c labels new.
     currentRegister := method inputVariables + method localVariables. ]
].

c@(SSAVM Compiler Context traits) copy
[
  resend `>>
    [registerValues := c registerValues copy.
     relocations := c relocations copy.
     labels := c labels copy.
     currentRegister := c currentRegister. ]
].

c@(SSAVM Compiler Context traits) resolveLabel: label at: index
[
  (c labels at: label) - index
].

c@(SSAVM Compiler Context traits) resolveLabels
"This takes the labels Dictionary and uses it to replace the temporary ID's
placed in the jump fields with actual offsets."
[
  code ::= c method code.
  c relocations keysAndValuesDo:
    [| :index :label offset |
     offset := c resolveLabel: label at: index.
     code at: index put: offset]
].

c@(SSAVM Compiler Context traits) flush
[
  c method code := c codeWriter contents.
  c method debugMap := c debugMap as: Array.
  c resolveLabels.
  c
].

c@(SSAVM Compiler Context traits) beClosure [c isClosure := True].

gen@(SSAVM Compiler traits) currentContext
[gen contexts top].

gen@(SSAVM Compiler traits) newRegister
[
  gen contexts top currentRegister += 1
].

gen@(SSAVM Compiler traits) registerFor: obj fromSource: def &result
[
   "the whole problem with this function is that we could cache a literal that
 is only loaded in a loop which may not always be executed. remove this code
until we have it figured out."
"  gen contexts top registerValues do:
    [| :val | val value = obj
                 ifTrue:
                   [val key = result \/ [result isNil]
                        ifTrue: [^ val key]
                        ifFalse: [result `defaultsTo: gen newRegister.
                                  gen emit: gen moveRegister
                                      withParameters: {result. val key}
                                      fromSource: def.
                                  ^ result]]].
 "
  "we don't want result to be a local variable and have it overwritten later"
  "saveRegister ::= result isNil."
  saveRegister ::= False.
  result `defaultsTo: gen newRegister.
  gen emit: gen loadLiteral
      withParameters: {result. obj}
      fromSource: def.
  saveRegister ifTrue: [gen setRegister: result to: obj].
  result
].

gen@(SSAVM Compiler traits) setRegister: x to: y
[
  gen contexts top registerValues add: x -> y ifPresent:
    [error: 'Compiler error: Register already set.'].
].

gen@(SSAVM Compiler traits) currentMethod
[gen currentContext method].

gen@(SSAVM Compiler traits) codeWriter
[gen currentContext codeWriter].

gen@(SSAVM Compiler traits) newLabelIndex
[
  gen currentContext labels `>> [addLast: Nil. indexLast]
].

gen@(SSAVM Compiler traits) emitLabel &labelIndex
[
  labelIndex `defaultsTo: gen newLabelIndex.
  gen currentContext labels at: labelIndex put: gen codeWriter position.
  labelIndex
].

gen@(SSAVM Compiler traits) emitRelocationAgainst: label
[
  gen currentContext relocations at: gen codeWriter position put: label
].

gen@(SSAVM Compiler traits) emitObject: value fromSource: node
[
  "0 below: bytesPerWord do: [| :byte | gen emitByte: (value byteShift: 0 - byte) intoByte fromSource: node]."
  gen mapTo: node.
  gen codeWriter nextPut: value
].

gen@(SSAVM Compiler traits) emitBranchTo: label fromSource: msg
[
  gen emitRelocationAgainst: label.
  gen emitObject: 0 fromSource: msg "replaced later when flushed"
].

gen@(SSAVM Compiler traits) mapTo: sourceTree
[
  index ::= gen codeWriter position.
  (debugMap ::= gen currentContext debugMap) isEmpty not /\ [debugMap last == sourceTree]
    ifTrue: [debugMap at: debugMap indexLast - 1 infect: [| :value | index max: value].
             debugMap at: debugMap indexLast - 2 infect: [| :value | index min: value]]
    ifFalse: [debugMap addAllLast: {index. index. sourceTree}]
].

gen@(SSAVM Compiler traits) emit: code@(Integer traits) withParameters: values fromSource: node
[
  gen emit: (gen ByCode at: code) withParameters: values fromSource: node
].

gen@(SSAVM Compiler traits) emit: code@(Symbol traits) withParameters: values fromSource: node
[
  gen emit: (code sendTo: {gen}) withParameters: values fromSource: node
].

gen@(SSAVM Compiler traits) emit: code@(SSAVM Compiler Instruction traits) withParameters: values fromSource: node
[
  "add the selector to the list so we know what this function calls... so it can be unoptimized if needed"
  code = gen directSendMessage
    \/ [code = gen sendMessageWithOptionals]
    \/ [code = gen sendMessageWithOptionalsInline]
    ifTrue: [gen currentContext method selectors := gen currentContext method selectors ; {values second}].
  gen emitObject: code fromSource: node.
  values do: [| :value | gen emitObject: value fromSource: node]
].

gen@(SSAVM Compiler traits) emit: code fromSource: node
"Emitting an instruction without an immediate value required just puts the
byte onto the end."
[
  gen emit: code
      withParameters: #{}
      fromSource: node
].

"
=======================================================================
Generate methods. They all must return the register(s) with the results
=======================================================================
"

gen@(SSAVM Compiler traits) generate: node@(nodes Node traits) result: result
[gen generate: node &result: result].

_@(SSAVM Compiler traits) generate: _@(nodes Node traits)
"Do nothing in the default case, for comments and annotations and such."
[error: 'do not call generate without a result'].

_@(SSAVM Compiler traits) generate: _@(nodes Node traits) &result
"Do nothing in the default case, for comments and annotations and such."
[].

gen@(SSAVM Compiler traits) generate: ann@(nodes Annotation traits) &result
"Generate the annotation's value."
[
  gen generate: ann value
].

gen@(SSAVM Compiler traits) generate: block@(nodes Block traits) &result &topLevel
"Encountering a new block, build a new CompiledMethod object and push it and
a new bytecode array writer onto the generator, then go through the underlying
code and generate that. When done, pop both, set up the block as a literal
and push it onto the stack."
[
  topLevel `defaultsTo: False.
  newBlock ::= CompiledMethod new `>>
    [environment := gen contexts isEmpty
       ifTrue: [block topLevel namespace]
       ifFalse: [gen currentMethod environment].
     sourceTree := block. ].
  gen contexts push: (gen Context newOn: newBlock).
  "we macroexpand everything before we set the current register because macroexpansion can add localvariables etc"
  statements ::= block statements collect:
    [| :statement | statement macroExpand &environment: gen currentMethod sourceTree].
  gen currentContext currentRegister := block localVariables size. "input variables might not be needed"
  statements isEmpty
    ifTrue:
      [gen emit: gen returnValue
           withParameters: {Nil}
           fromSource: block]
    ifFalse:
      [statements allButLastDo: [| :node | gen generate: node].
       gen emit: gen returnRegister
           withParameters: {gen generate: statements last}
           fromSource: block].

  "Set the variable information after generation, just in case it was modified."
  newBlock `>>
   [inputVariables := block inputVariables size.
    localVariables := block localVariables size.
    restVariable := block restVariable isNotNil.
    registerCount := gen currentContext currentRegister + 1.
    "reserved1 := gen currentContext currentRegister + 1."
    optionalKeywords := block optionalKeywords. ].
  isClosure ::= gen currentContext isClosure.

  gen contexts pop flush.
  "Forces the newBlock to record all the remaining stream input correctly."

  gen contexts isEmpty \/ [topLevel]
    ifFalse:
      [result `defaultsTo: gen newRegister. "asking for a register requires a context"
       gen emit: (isClosure ifTrue: [gen newClosure] ifFalse: [gen loadLiteral])
           withParameters: {result. newBlock}
           fromSource: block].

  gen contexts isEmpty \/ [topLevel] ifTrue: [newBlock] ifFalse: [result]
].

gen@(SSAVM Compiler traits) generate: sig@(nodes Signature traits) &result
[
  shouldNotImplement
].

gen@(SSAVM Compiler traits) generate: def@(nodes MethodDefinition traits) &result
"Translate method definitions to equivalent asMethod:on: invocations."
[
  gen contexts isEmpty
    ifTrue: [^ resend].
  blockRegister ::= #generate:result: sendTo: {gen. def. Nil} through: {gen. nodes Block. Nil}.
  arrayRegister ::= gen newRegister.
  selectorRegister ::= gen registerFor: def selector fromSource: def.
  roleRegisters ::= def roles collect: #(gen generate: _) `er.
  result `defaultsTo: gen newRegister.
  gen emit: gen newArrayWith
      withParameters: {arrayRegister. roleRegisters size} ; roleRegisters
      fromSource: def.
  gen emit: gen directSendMessage
      withParameters: {result. #asMethod:on:. 3. blockRegister. selectorRegister. arrayRegister}
      fromSource: def.
  result
].

gen@(SSAVM Compiler traits) generate: r@(nodes Resend traits) &result
[
  scope ::= gen currentMethod sourceTree.
  lexOffset ::= gen contexts indexLast -
    ((gen contexts indexOfLastSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
      ifNil:
        [error: 'resend must be used within a method definition.']).
  lexOffset isPositive
    ifTrue:
      [(gen contexts fromTop: lexOffset) method heapAllocate := True.
       (gen contexts top: lexOffset) do: #beClosure `er].
  result `defaultsTo: gen newRegister.
  gen emit: gen resendMessage
      withParameters: {result. lexOffset}
      fromSource: r.
  result
].

gen@(SSAVM Compiler traits) generate: r@(nodes Return traits) &result
[overrideThis].

gen@(SSAVM Compiler traits) generate: r@(nodes Return traits) by: lexOffset &result
[
  result `defaultsTo: gen newRegister.
  lexOffset isPositive
    ifTrue:
      [(gen contexts fromTop: lexOffset) method heapAllocate := True.
       (gen contexts top: lexOffset) do: #beClosure `er].
  gen generate: r value &result: result.
  gen emit: gen returnFrom
      withParameters: {result. lexOffset}
      fromSource: r.
  result.
].

gen@(SSAVM Compiler traits) generate: r@(nodes ReturnClose traits) &result
"Exits the first enclosing named method in the lexical scope."
[
  lexOffset ::= gen contexts indexLast -
    ((gen contexts indexOfLastSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
      ifNil:
        [error: '^ must be used within a method definition.']).
  gen generate: r by: lexOffset &result: result
].

gen@(SSAVM Compiler traits) generate: r@(nodes ReturnFar traits) &result
"Exits the last enclosing named method in the lexical scope."
[
  lexOffset ::= gen contexts indexLast -
    ((gen contexts indexOfFirstSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
      ifNil:
        [error: '^^ must be used within a method definition.']).
  gen generate: r by: lexOffset &result: result
].

gen@(SSAVM Compiler traits) generate: r@(nodes ReturnLevel traits) &result
"Exits the Nth enclosing lexical scope."
[gen generate: r by: r level &result: result].

gen@(SSAVM Compiler traits) generate: literal@(nodes Literal traits) &result
[
  gen registerFor: literal value fromSource: literal &result: result
].

gen@(SSAVM Compiler traits) generate: n@(nodes CompoundStatement traits) &result
"return the registers that the values were saved into"
[
  n statements collectWithIndex:
    [| :node :index |
     index = n statements indexLast
       ifTrue: [gen generate: node &result: result]
       ifFalse: [gen generate: node]]
].

gen@(SSAVM Compiler traits) generate: n@(nodes Parenthesis traits) &result
"return the registers that the values were saved into"
[
  n statements isEmpty
    ifTrue: [#{}]
    ifFalse: [n statements allButLastDo: [| :node | gen generate: node result: Nil].
              gen generate: n statements last result: result]
].

gen@(SSAVM Compiler traits) generate: i@(nodes ImplicitArgument traits) &result
[
  result `defaultsTo: gen newRegister.
  gen emit: gen loadEnvironment
      withParameters: {result}
      fromSource: i.
  result
].

gen@(SSAVM Compiler traits) generate: _@(nodes Namespace traits) &result
[shouldNotImplement].

gen@(SSAVM Compiler traits) generate: load@(nodes LoadVariable traits) &result
[
  scope ::= load variable scope.
  varIndex ::= scope localVariables indexOf: load variable.
  lexOffset ::= gen contexts indexLast -
    ((gen contexts indexOfLastSatisfying: [| :context | context method sourceTree == scope])
      ifNil:
        [error: 'Could not determine variable scope.']).
  lexOffset isZero
    ifTrue:
      [result `defaultsTo: varIndex.
       gen emit: gen loadVariable
           withParameters: {varIndex}
           fromSource: load.
       result = varIndex ifFalse:
         [gen emit: gen moveRegister
              withParameters: {result. varIndex}
              fromSource: load]]
    ifFalse:
      [result `defaultsTo: gen newRegister.
       (gen contexts fromTop: lexOffset) method heapAllocate := True.
       (gen contexts top: lexOffset) do: #beClosure `er.
       gen emit: gen loadFreeVariable
           withParameters: {result. lexOffset. varIndex}
           fromSource: load].
  result
].

gen@(SSAVM Compiler traits) generate: store@(nodes StoreVariable traits) &result
[
  scope ::= store variable scope.
  varIndex ::= scope localVariables indexOf: store variable.
  lexOffset ::= gen contexts indexLast -
    ((gen contexts indexOfLastSatisfying: [| :context | context method sourceTree == scope])
      ifNil:
        [error: 'Could not determine variable scope.']).
  lexOffset isZero
    ifTrue:
      [result `defaultsTo: varIndex.
       gen generate: store value &result: varIndex.
       gen emit: gen storeVariable
           withParameters: {varIndex}
           fromSource: store.
       result = varIndex ifFalse:
         [gen emit: gen moveRegister
              withParameters: {result. varIndex}
              fromSource: store]]
    ifFalse:
      [result `defaultsTo: gen newRegister.
       gen generate: store value &result.
       (gen contexts fromTop: lexOffset) method heapAllocate := True.
       (gen contexts top: lexOffset) do: #beClosure `er.
       gen emit: gen storeFreeVariable
           withParameters: {lexOffset. varIndex. result}
           fromSource: store].
  result
].

gen@(SSAVM Compiler traits) generate: array@(nodes Array traits) &result
"Generate the code to push the element expression results on the stack,
then the appropriate literal-array constructor bytecode."
[
  registers ::= resend.
  result `defaultsTo: gen newRegister.
  gen emit: gen newArrayWith
      withParameters: {result. array size} ; registers
      fromSource: array.
  result
].

gen@(SSAVM Compiler traits) generate: selector@(Symbol traits) on: args fromSource: msg@(nodes Message traits) &result
"Generate the code to push the argument expression results on the stack, then
the push for the selector, and then the appropriate message send bytecode."
[
  result `defaultsTo: gen newRegister.
  argRegisters ::= args collect: #(gen generate: _) `er.
  gen emit: gen directSendMessage
      withParameters: {result. selector. args size} ; argRegisters
      fromSource: msg.
  result
].

gen@(SSAVM Compiler traits) generate: msg@(nodes Message traits) &result &optionals
[
  gen generate: msg selector on: msg arguments fromSource: (optionals `defaultsTo: msg) &result
].

gen@(SSAVM Compiler traits) generate: macro@(nodes Macro traits) &result &optionals
[
  "gen generate: (macro macroExpand &optionals: optionals &environment: gen currentMethod sourceTree) &result"
  error: 'Cannot support macroexpansion at code generation time because of localVariable side-effects'.
].

gen@(SSAVM Compiler traits) generate: def@(nodes Deferred traits) &result &optionals
[| message |
  block ::= nodes Block new `>> [parentScope := gen currentMethod sourceTree. ].
  def arguments size timesRepeat: [block addInputVariable].
  message := nodes Message sending: def selector to:
    (block inputVariables collect: #(nodes LoadVariable from: _) `er).
  optionals ifNotNil:
    [message := (nodes OptionalArguments for: message)
       `>> [arguments := optionals arguments deepCopy: block. ]].
  block statements := {message}.
  gen generate:
    (nodes KeywordMessage
      sending: #whenFulfilled:
      to: {def arguments as: nodes Array. block})
    &result: result
].

gen@(SSAVM Compiler traits) generate: selector@(Symbol traits) on: args fromSource: optionals@(nodes OptionalKeywords traits) &result
"Generate the code to push the argument expression results on the stack, then
the push for the selector, and then the appropriate message send bytecode."
[
  result `defaultsTo: gen newRegister.
  argRegisters ::= args collect: #(gen generate: _) `er.
  optionalsArray ::= ExtensibleArray new.
  optionalsWriter ::= optionalsArray writer.
  optionals keywords with: optionals arguments do:
    [| :key :arg |
     optionalsWriter nextPut: (gen registerFor: key fromSource: optionals).
     optionalsWriter nextPut: (gen generate: arg)].
  gen emit: gen sendMessageWithOptionalsInline
      withParameters: {result. selector. args size. optionalsArray size} ; argRegisters ; optionalsArray
      fromSource: optionals.
  result
].

gen@(SSAVM Compiler traits) generate: optionals@(nodes OptionalKeywords traits) &result
[
  gen generate: optionals message &result: result &optionals: optionals
].

gen@(SSAVM Compiler traits) generate: rest@(nodes RestArguments traits) &result
[
  gen generate: rest message selector
      on: rest message arguments ; rest arguments
      fromSource: rest message
      &result: result
].

SSAVM define: #SSACode -> SSAVM Code.
SSAVM define: #SSACompiler -> SSAVM Compiler.
define: #VM -> SSAVM.

block@(nodes Block traits) compile
"Invoke the VM ByteCompiler."
[
  SSAVM Compiler new generate: block
].
