
gen@(SSAVM Compiler traits) generate: _@#apply* on: args fromSource: node &result
[
  result `defaultsTo: gen newRegister.
  methodReg ::= gen generate: args first.
  argRegs ::= args allButFirst collect: [| :item | gen generate: item].
  gen emit: gen directApplyTo
      withParameters: {methodReg. argRegs size. result} ; argRegs
      fromSource: node.
  result
].

gen@(SSAVM Compiler traits) generate: _@#applyWith: on: args fromSource: node &result
[
  result `defaultsTo: gen newRegister.
  methodReg ::= gen generate: args first.
  argReg ::= gen generate: args second.
  gen emit: gen directApplyTo
      withParameters: {methodReg. 1. result. argReg}
      fromSource: node.
  result
].

gen@(SSAVM Compiler traits) generate: _@#applyWith:with: on: args fromSource: node &result
[
  result `defaultsTo: gen newRegister.
  methodReg ::= gen generate: args first.
  argRegs ::= args allButFirst collect: [| :item | gen generate: item].
  gen emit: gen directApplyTo
      withParameters: {methodReg. argRegs size. result} ; argRegs
      fromSource: node.
  result
].

gen@(SSAVM Compiler traits) canInline: _@#applyTo: on: args
[
  args second isSameAs: nodes Array
].

gen@(SSAVM Compiler traits) generate: sel@#applyTo: on: args fromSource: node &result
[
  (gen canInline: sel on: args)
    ifTrue:
      [result `defaultsTo: gen newRegister.
       methodReg ::= gen generate: args first.
       argRegs ::= args second statements collect:
         [| :item | gen generate: item].
       gen emit: gen directApplyTo
         withParameters: {methodReg. argRegs size. result} ; argRegs
         fromSource: node.
       result]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) canInline: _@#do on: args
[
  (args first isSameAs: nodes Block)
    /\ [args first localVariables isEmpty]
].

gen@(SSAVM Compiler traits) generate: sel@#do on: args fromSource: node &result
"If the block is a literal with no variables, then inline it.
Otherwise, fall back to evaluating it via 'do'."
[
  (gen canInline: sel on: args)
    ifTrue:
      [statements ::= args first statements.
       result `defaultsTo: gen newRegister.
       statements isEmpty
         ifTrue: [gen emit: gen loadLiteral
                      withParameters: {result. Nil}
                      fromSource: node.
                  result]
         ifFalse: [statements allButLastDo: [| :node | gen generate: node].
                   gen generate: statements last &result: result]]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generateExecutionOf: args fromSource: node &result
[gen generate: #do on: args fromSource: node &result: result].

gen@(SSAVM Compiler traits) generate: _@#primitiveApply* on: args fromSource: node &result
[
  result `defaultsTo: gen newRegister.
  indexReg ::= gen generate: args first.
  argRegs ::= args second statements collect: [| :item | gen generate: item].
  gen emit: gen primitiveDo
      withParameters: {indexReg. argRegs size. result} ; argRegs
      fromSource: node.
  result
].

gen@(SSAVM Compiler traits) canInlineGlobalAccessOn: args
[
  args first isSameAs: nodes ImplicitArgument
].

gen@(SSAVM Compiler traits) generate: _@#True on: args fromSource: node &result
[
  (gen canInlineGlobalAccessOn: args)
    ifTrue: [gen registerFor: True fromSource: node &result: result]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#False on: args fromSource: node &result
[
  (gen canInlineGlobalAccessOn: args)
    ifTrue: [gen registerFor: False fromSource: node &result: result]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#Nil on: args fromSource: node &result
[
  (gen canInlineGlobalAccessOn: args)
    ifTrue: [gen registerFor: Nil fromSource: node &result: result]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#== on: args fromSource: node &result
[
  result `defaultsTo: gen newRegister.
  argRegs ::= args collect: [| :arg | gen generate: arg].
  gen emit: gen isIdenticalTo
      withParameters: {result. argRegs first. argRegs second}
      fromSource: node.
  result
].

gen@(SSAVM Compiler traits) emitJumpToLabel: label fromSource: node
[
  gen emit: gen jumpTo
      fromSource: node.
  gen emitBranchTo: label fromSource: node.
].

gen@(SSAVM Compiler traits) generate: _@#loop on: args fromSource: node &result
"Repeatedly evaluates a block via 'do'."
[
  label ::= gen emitLabel.
  gen generateExecutionOf: args fromSource: node.
  gen emitJumpToLabel: label fromSource: node.
  gen registerFor: Nil fromSource: node &result: result "return nil"
].

gen@(SSAVM Compiler traits) generate: _@#isNil on: args fromSource: node &result
[
  result `defaultsTo: gen newRegister.
  objReg ::= gen generate: args first.
  gen emit: gen isNilOp
      withParameters: {result. objReg}
      fromSource: node.
  result
].

gen@(SSAVM Compiler traits) branchTableHash: key
[
  key identityHash
].

gen@(SSAVM Compiler traits) buildBranchTableMapping: keys
[| tableSize |
  tableSize := 1.
  [tableSize < keys size]
    whileTrue:
      [tableSize *= 2].
  table ::= Array newSize: tableSize * 2.
  keys do:
    [| :key hash |
     hash := (gen branchTableHash: key) bitAnd: (tableSize - 1) * 2.
     [(table at: hash) isNil]
       whileFalse:
         [key = (table at: hash)
            ifTrue:
              [error: 'Duplicate key ' ; key printString ; ' in caseOf:.'].
          (hash += 2) >= (tableSize * 2) ifTrue:
            [hash := 0]].
     table at: hash put: key].
  table
].

gen@(SSAVM Compiler traits) mayInlineCaseOf: node
"Answer whether a safe inlining is possible for a caseOf: expression without
further analysis; currently this is the case where the second argument is a
literal array, and the appropriate Associations and their elements are laid
out with literal keys."
[
  (node arguments second isSameAs: nodes Array) /\
   [node arguments second statements allSatisfy:
     [| :assoc |
      (assoc is: nodes Message)
        /\ [assoc selector = #->]
        /\ [assoc arguments first is: nodes Literal]
        /\ [{Symbol. ASCIIString Character. SmallInteger} anySatisfy:
          [| :proto | assoc arguments first value is: proto]]]]
].

gen@(SSAVM Compiler traits) generate: _@#caseOf:otherwise: on: args fromSource: node &result: finalResult
[
  (gen mayInlineCaseOf: node)
    ifTrue:
      [assocs ::= args second statements.
       labels ::= assocs collect: [| :_ | gen newLabelIndex].
       finalResult `defaultsTo: gen newRegister.
       table ::=
         gen buildBranchTableMapping:
           (assocs collect: [| :assoc | assoc arguments first value]).
       indices ::= IdentityDictionary new.
       0 below: table size by: 2 do:
         [| :index | (table at: index) ifNotNilDo: [| :val | indices at: val put: index]].

       switchKeyRegister ::= gen generate: args first.
       gen emit: gen branchKeyed
         withParameters: {switchKeyRegister. gen registerFor: table fromSource: node}
         fromSource: node.
       branchOffset ::= gen codeWriter position.
       gen emitInstruction: gen jumpTo
         fromSource: node.
       endLabel ::= gen newLabelIndex.
       otherwiseLabel ::= gen newLabelIndex.
       gen emitBranchTo: otherwiseLabel fromSource: node.

       assocs with: labels do:
         [| :assoc :label |
          gen emitLabel &labelIndex: label.
          table
            at: (indices at: assoc arguments first value) + 1
            put: (gen currentContext resolveLabel: label at: branchOffset).
          gen generateExecutionOf: {assoc arguments second} fromSource: node &result: finalResult.
          gen emitJumpToLabel: endLabel fromSource: node].

       "Handle the otherwise clause. If we didn't get a literal block for it, just
         encode a Nil-push."
       gen emitLabel &labelIndex: otherwiseLabel.
       args size >= 3
         ifTrue: [gen generateExecutionOf: {args third} fromSource: node &result: finalResult]
         ifFalse: [gen registerFor: Nil fromSource: node &result: finalResult].
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#caseOf: on: args fromSource: node &result
"Generates a caseOf:otherwise: with a default otherwise clause."
[
  (gen mayInlineCaseOf: node)
    ifTrue: [gen generate: #caseOf:otherwise: on: args fromSource: node &result: result]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) emitBranchIfTrue: conditionRegister to: label fromSource: node
[
  gen emit: gen branchIfTrue
      withParameters: {conditionRegister}
      fromSource: node.
  gen emitBranchTo: label fromSource: node.
].

gen@(SSAVM Compiler traits) emitBranchIfFalse: conditionRegister to: label fromSource: node
[
  gen emit: gen branchIfFalse
      withParameters: {conditionRegister}
      fromSource: node.
  gen emitBranchTo: label fromSource: node.
].

gen@(SSAVM Compiler traits) generate: _@#ifTrue:ifFalse: on: args fromSource: node &result: finalResult
"Branches to one of two blocks and evaluates it."
[
  (args second isSameAs: nodes Block)
    /\ [args third isSameAs: nodes Block]
    ifTrue:
      [falseLabel ::= gen newLabelIndex.
       endLabel ::= gen newLabelIndex.
       finalResult `defaultsTo: gen newRegister.
       (condReg ::= gen generate: args first)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfFalse: condReg to: falseLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node &result: finalResult.
       gen emitJumpToLabel: endLabel fromSource: node.
       gen emitLabel &labelIndex: falseLabel.
       gen generateExecutionOf: {args third} fromSource: node &result: finalResult.
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#ifTrue: on: args fromSource: node &result: finalResult
"Optionally evaluates a block."
[
  (args second isSameAs: nodes Block)
    ifTrue:
      [falseLabel ::= gen newLabelIndex.
       endLabel ::= gen newLabelIndex.
       finalResult `defaultsTo: gen newRegister.
       (condReg ::= gen generate: args first)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfFalse: condReg to: falseLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node &result: finalResult.
       gen emitJumpToLabel: endLabel fromSource: node.
       gen emitLabel &labelIndex: falseLabel.
       gen registerFor: Nil fromSource: node &result: finalResult.
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#ifFalse: on: args fromSource: node &result: finalResult
[
  (args second isSameAs: nodes Block)
    ifTrue:
      [falseLabel ::= gen newLabelIndex.
       endLabel ::= gen newLabelIndex.
       finalResult `defaultsTo: gen newRegister.
       (condReg ::= gen generate: args first)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfTrue: condReg to: falseLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node &result: finalResult.
       gen emitJumpToLabel: endLabel fromSource: node.
       gen emitLabel &labelIndex: falseLabel.
       gen registerFor: Nil fromSource: node &result: finalResult.
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#ifNil:ifNotNil: on: args fromSource: node &result: finalResult
[
  (args second isSameAs: nodes Block)
    /\ [args third isSameAs: nodes Block]
    ifTrue:
      [falseLabel ::= gen newLabelIndex.
       endLabel ::= gen newLabelIndex.
       finalResult `defaultsTo: gen newRegister.
       lhsValueReg ::= gen generate: args first &result: finalResult. "do not evaluate twice"
       condReg ::= gen newRegister.
       gen emit: gen isNilOp
         withParameters: {condReg. lhsValueReg}
         fromSource: node.
       gen emitBranchIfFalse: condReg to: falseLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node &result: finalResult.
       gen emitJumpToLabel: endLabel fromSource: node.
       gen emitLabel &labelIndex: falseLabel.
       gen generateExecutionOf: {args third} fromSource: node &result: finalResult.
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#ifNil: on: args fromSource: node &result: finalResult
[
  (args second isSameAs: nodes Block)
    ifTrue:
      [endLabel ::= gen newLabelIndex.
       finalResult `defaultsTo: gen newRegister.
       lhsValueReg ::= gen generate: args first &result: finalResult. "do not evaluate twice"
       condReg ::= gen newRegister.
       gen emit: gen isNilOp
         withParameters: {condReg. lhsValueReg}
         fromSource: node.
       gen emitBranchIfFalse: condReg to: endLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node &result: finalResult.
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#ifNotNil: on: args fromSource: node &result: finalResult
[
  (args second isSameAs: nodes Block)
    ifTrue:
      [endLabel ::= gen newLabelIndex.
       finalResult `defaultsTo: gen newRegister.
       lhsValueReg ::= gen generate: args first &result: finalResult. "do not evaluate twice"
       condReg ::= gen newRegister.
       gen emit: gen isNilOp
         withParameters: {condReg. lhsValueReg}
         fromSource: node.
       gen emitBranchIfTrue: condReg to: endLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node &result: finalResult.
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#/\ on: args fromSource: node &result: finalResult
"Optionally evaluates a block."
[
  (args second isSameAs: nodes Block)
    ifTrue:
      [falseLabel ::= gen newLabelIndex.
       endLabel ::= gen newLabelIndex.
       finalResult `defaultsTo: gen newRegister.
       (condReg ::= gen generate: args first)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfFalse: condReg to: falseLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node &result: finalResult.
       gen emitJumpToLabel: endLabel fromSource: node.
       gen emitLabel &labelIndex: falseLabel.
       gen registerFor: False fromSource: node &result: finalResult.
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#\/ on: args fromSource: node &result: finalResult
"Optionally evaluates a block."
[
  (args second isSameAs: nodes Block)
    ifTrue:
      [falseLabel ::= gen newLabelIndex.
       endLabel ::= gen newLabelIndex.
       finalResult `defaultsTo: gen newRegister.
       (condReg ::= gen generate: args first)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfTrue: condReg to: falseLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node &result: finalResult.
       gen emitJumpToLabel: endLabel fromSource: node.
       gen emitLabel &labelIndex: falseLabel.
       gen registerFor: True fromSource: node &result: finalResult.
       gen emitLabel &labelIndex: endLabel.
       finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#whileTrue: on: args fromSource: node &result: finalResult
"Repeatedly evaluates a block while it returns True."
[
  (args first isSameAs: nodes Block)
    /\ [args second isSameAs: nodes Block]
    ifTrue:
      [endLabel ::= gen newLabelIndex.
       label ::= gen emitLabel.
       (condReg ::= gen generateExecutionOf: {args first} fromSource: node)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfFalse: condReg to: endLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node.
       gen emitJumpToLabel: label fromSource: node.
       gen emitLabel &labelIndex: endLabel.
       gen registerFor: Nil fromSource: node &result: finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#whileFalse: on: args fromSource: node &result: finalResult
"Repeatedly evaluates a block while it returns False."
[
  (args first isSameAs: nodes Block)
    /\ [args second isSameAs: nodes Block]
    ifTrue:
      [endLabel ::= gen newLabelIndex.
       label ::= gen emitLabel.
       (condReg ::= gen generateExecutionOf: {args first} fromSource: node)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfTrue: condReg to: endLabel fromSource: node.
       gen generateExecutionOf: {args second} fromSource: node.
       gen emitJumpToLabel: label fromSource: node.
       gen emitLabel &labelIndex: endLabel.
       gen registerFor: Nil fromSource: node &result: finalResult]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#whileTrue on: args fromSource: node &result
"Repeatedly evaluates a block while it returns True."
[
  (args first isSameAs: nodes Block)
    ifTrue:
      [label ::= gen emitLabel.
       (condReg ::= gen generateExecutionOf: args fromSource: node)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfTrue: condReg to: label fromSource: node.
       gen registerFor: Nil fromSource: node &result: result]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#whileFalse on: args fromSource: node &result
"Repeatedly evaluates a block while it returns False."
[
  (args first isSameAs: nodes Block)
    ifTrue:
      [label ::= gen emitLabel.
       (condReg ::= gen generateExecutionOf: args fromSource: node)
         ifNil: [error: 'conditional is nil: ' ; args first printString].
       gen emitBranchIfFalse: condReg to: label fromSource: node.
       gen registerFor: Nil fromSource: node &result: result]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#primitiveDo: on: args fromSource: node &result
[
  result `defaultsTo: gen newRegister.
  indexReg ::= gen generate: args first.
  argRegs ::= args second statements collect: [| :item | gen generate: item].
  gen emit: gen primitiveDo
      withParameters: {indexReg. argRegs size. result} ; argRegs
      fromSource: node.
  result
].

gen@(SSAVM Compiler traits) generate: _@#fill:with: on: args fromSource: node &result
[| index value tempVar |
  block ::= args first.
  index := args second.
  value := args third.
  (block isSameAs: nodes Block)
    /\ [index isSameAs: nodes Literal]
    /\ [block inputVariables acceptsKey: index value]
    ifTrue:
      [(value isSameAs: nodes Literal)
         ifFalse:
           [tempVar := gen currentMethod sourceTree addVariable.
            gen generate: (nodes StoreVariable of: value into: tempVar). "fixme"
            value := nodes LoadVariable from: tempVar].
       index := index value.
       var ::= block inputVariables at: index.
       block inputVariables := block inputVariables copyWithoutAt: index.
       block localVariables
         replaceFrom: index
         below: block localVariables indexLast
         with: block localVariables
         startingAt: index + 1.
       block localVariables at: block localVariables indexLast put: var.
       block statements :=
         {nodes StoreVariable of: value into: var} ; block statements.
       gen generate: block &result: result]
    ifFalse: [resend]
].

gen@(SSAVM Compiler traits) generate: _@#<-* on: args fromSource: node &result
"Optimizes currying calls on literal blocks using #fill:with:."
[
  (args first isSameAs: nodes Block)
    ifTrue:
      [gen
         generate: #fill:with:
         on: (args copyWith:
                (nodes Literal for: args first inputVariables indexLast) at: 1)
         fromSource: node
         &result: result]
    ifFalse: [resend]
].
